#!/bin/sh                   
export POSIXLY_CORRECT=yes 
export LC_ALL=C

print_help()
{
    echo "xtf [-h|--help] [FILTR] [PŘÍKAZ] UŽIVATEL LOG [LOG2 [...]."
    echo "FILTR : list|list-currency|status|profit "
    echo "PŘÍKAZ : -c | -a | -b"
    echo "UŽIVATEL : meno uzivatela"
    echo "LOG: poskytnuty subor, moze tiez koncit na .gz"
    echo "-c: typ meny pozostavajuci z 3 pismen. Vypise riadky s danou menou."
    echo "-a: po datume vo formate %Y-%m-%d %H:%M:%S. Vypise riadky po danom datume."
    echo "-b: pred datumom vo formate %Y-%m-%d %H:%M:%S. Vypise riadky pred danym datumom."


}

COMMAND="list"
COMMAND_SET=0
LOG_FILE=""
AFTER_DATE=""
BEFORE_DATE=""
CURRENCY=""
USERNAME=""
FILTERED=""
: "${XTF_PROFIT:=20}"

# prech=adzanie argumentov
while [ $# -gt 0 ]; do
  case $1 in
    -h|--help)
        print_help
        exit 0
        ;;
    -a)
      #zistujeme ci je $2 argument v spravnom formate ak nie vypisujem chybu a chybova hlaska je vypisana na stderr
      #chybovu hlasku ktoru dodava date zahadzujem
        if ! date -d "$2" +"%Y-%m-%d %H:%M:%S" >/dev/null 2>&1; then
          echo "Incorect date format" >&2
          exit 1
        fi
        if [ -n "$AFTER_DATE" ]; then
          echo "Date already set." >&2
          exit 1
        fi
        AFTER_DATE="$2"

        # preskakujem 2 argumenty
        shift
        shift
        ;;
    -b)
      #zistujeme ci je $2 argument v spravnom formate ak nie vypisujem chybu a chybova hlaska je vypisana na stderr
      #chybovu hlasku ktoru dodava date zahadzujem
        if ! date -d "$2" +"%Y-%m-%d %H:%M:%S" >/dev/null 2>&1; then
          echo "Incorect date format" >&2
          exit 1
        fi
        if [ -n "$BEFORE_DATE" ]; then
          echo "Date already set." >&2
          exit 1
        fi
        BEFORE_DATE="$2" 

        # preskakujem 2 argumenty
        shift
        shift
        ;;
    -c)
        if [ -n "$CURRENCY" ]; then
          echo "Currency already set." >&2
          exit 1
        fi

        #pozeram ci je $2 argument v spravnom formate (3 za sebou iduce pismena)
        case $2 in
            [A-Za-z][A-Za-z][A-Za-z])
              CURRENCY="$2"
              ;;
            *)
              echo "Invalid currency argument." >&2
              exit 1
              ;;
        esac

        shift
        shift
        ;;
    list|list-currency|status|profit)
        COMMAND="$1"

        #ukladam pocet predanych prikazov ak je vacsi nez 1 dochadza k chybe
        COMMAND_SET=$((COMMAND_SET + 1))
        if [ "$COMMAND_SET" -ne 1 ]; then
          echo "Command already set." >&2
          exit 1
        fi
        shift
        ;;
    *.gz)
        #dekompresia suboru konciaceho na .gz a ukladanie do premennej log_file
        LOG_FILE="${LOG_FILE}$(gzip -d -c "$1")\n"
        shift
        ;;
    *)
        if [ -n "$USERNAME" ]; then
          #citam zadany subor a ukladam do log_file
          #ak pride k chybe s citanim zo suboru nastane chybovu hlasku cat zahadzujem a vypisujem vlastnu chybovu hlasku na stderr
          if contents=$(cat "$1") >/dev/null 2>&1; then
            LOG_FILE="${LOG_FILE}${contents}\n"
          else
            echo "Failed to read file." >&2
            exit 1
          fi
        else
          USERNAME="$1"
        fi
        shift
        ;;
  esac
done


#log_file je prazdny nebol nacitany subor
if [ -z "$LOG_FILE" ]; then
  echo "No file provided." >&2
  exit 1
fi

#zbavujem sa posldneho \n ktory bol mnou pridany pocas prechadzania argumentov
LOG_FILE=$(echo "$LOG_FILE" | sed 's/\n$//')

#kontrolujem ci neni nejaky stlpec v log subore prazdny ak je nastav chyba a chybova hlaska je vypisana na stderr
empty_column=$(echo "$LOG_FILE" | awk -F ';' '{if ($1 == "" || $2 == "" || $3 == "" || $4 == "") {print "1"; exit 1}}')

if [ -n "$empty_column" ]; then 
  echo "Empty column found in log" >&2
  exit 1
fi


#meno uzivatela je vzdy zadane filtrujem riadky v ktorom je zadane meno uzivatela rovnake s $1<-(stlpec v ktorom su mena uzivatelov)
#ukladam do filtered (riadky su oddelene ;)
FILTERED=$(echo "$LOG_FILE" | awk -F';' -v username="$USERNAME" '$1 == username {print}')


#kontrolujem ci bol -a  argument zadany (ak nie after_date by bolo prazdne) ak ano ukladam riadky po danom datume  $2<-(stlpec v ktorom su datumy)
if [ -n "$AFTER_DATE" ]; then
  FILTERED=$(echo "$FILTERED" | awk -F';' -v after_date="$AFTER_DATE" '$2 > after_date {print}')
fi

#kontrolujem ci bol -b argument zadany (ak nie before_date by bolo prazdne)  ak ano ukladam riadky pred danym datumom  $2<-(stlpec v ktorom su datumy)
if [ -n "$BEFORE_DATE" ]; then
  FILTERED=$(echo "$FILTERED" | awk -F';' -v before_date="$BEFORE_DATE" '$2 < before_date {print}')
fi

#kontrolujem ci bol -c argument zadany (ak nie currency by bolo prazdne) ak ano ukladam riadky rovnake s $2<-(stlpec v ktorom su meny)
if [ -n "$CURRENCY" ]; then 
  FILTERED=$(echo "$FILTERED" | awk -v currency="$CURRENCY" -F';' '$3 == currency {print}')
fi

#prechadzanie danych prikazov
if [ "$COMMAND" = "list" ]; then
  #vypiseme vsetko
  FILTERED=$(echo "$FILTERED" | awk -F';' '{print}')
elif [ "$COMMAND" = "list-currency" ]; then
  #pre kazdu videnu menu sa priratava hodnota v poli seen
  #vypisuju sa ak mena este nebola videna (dana mena ma hodnotu 0)
  FILTERED=$(echo "$FILTERED" | awk -F';' '!seen[$3]++ {print $3}' | sort)
elif [ "$COMMAND" = "status" ]; then
  #zratavaju sa meny potom sa pre kazdu danu menu v poli sum vypise celkove mnozstvo
  FILTERED=$(echo "$FILTERED" | awk -F';' '{sum[$3]+=$4} END {for (curr in sum) printf "%s : %.4f\n", curr, sum[curr]}'| sort)
elif [ "$COMMAND" = "profit" ]; then
  #zratavaju sa meny potom sa vypisu dane meny s urcity profitom nakoniec sa zoradia
  FILTERED=$(echo "$FILTERED" | awk -F';' -v profit="$XTF_PROFIT" '{
  sum[$3] += $4
}
END {
    for (curr in sum) {
        if (sum[curr] > 0) {
            if (profit < 0) {
                printf "%s : %.4f\n", curr, sum[curr] + sum[curr] * 0.2
            } else if (profit >= 0){
                printf "%s : %.4f\n", curr, sum[curr] + sum[curr] * (0.01 * profit)
            }
        } else {
            printf "%s : %.4f\n", curr, sum[curr]
        }
    }
}' | sort)
fi

# pre vypis bez " : 0.0000" ak bol niekde status (zratavanie meny) nulovy
if echo "$FILTERED" | grep -q " : 0.0000"; then
  exit 0
fi

echo "$FILTERED" 